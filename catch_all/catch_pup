#!/usr/bin/env python
import os
import sys
import struct
import socket
import select
import argparse

class Catch_All:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET,
                                    socket.SOCK_RAW,
                                    socket.IPPROTO_PUP)

    def __del__(self):
        try:self.socket.close()
        except:pass

    def _unpack_ip_header(self, packet):
        header = struct.unpack('!BBHHHBBH4s4sHHLLBBHHH', packet[0:40])
        return {'dsf': header[1],
                'total_length': header[2],
                'id': header[3],
                'flags': header[4],
                'ttl': header[5],
                'protocol': header[6],
                'checksum': header[7],
                'src_ip': socket.inet_ntoa(header[8]),
                'dst_ip': socket.inet_ntoa(header[9]),
                'src_port': header[10],
                'dst_port': header[11],
                'seq': header[12],
                'ack': header[13],
                'length': header[14],
                'flags': header[15],
                'windows': header[16],
                'checksum': header[17],
                'urg_pnt': header[18]}

    def _pretty_print(self, ip_h):
        msg = '%s:%s -> %s:%s\n' % (ip_h['src_ip'], ip_h['src_port'],
                                    ip_h['dst_ip'], ip_h['dst_port'])
        sys.stdout.write(msg)

    def run(self):
        while True:
            try:
                inp, outp, exceptions = select.select([self.socket], [], [])
                for sock in inp:
                    packet, source = sock.recvfrom(1024)
                    ip_h = self._unpack_ip_header(packet)
                    self._pretty_print(ip_h)
            except KeyboardInterrupt:
                exit('bye')
            except Exception as e:
                sys.stderr.write('[ERROR] %s\n' % e)

if __name__ == "__main__":
    if os.geteuid() != 0:
        exit("must run as root")
    parser = argparse.ArgumentParser()
    args = parser.parse_args()
    CA = Catch_All()
    CA.run()
